version "3.6"

//Courtesy FishyClockwork, with modifications by Caligari87
class DarkDoomZ_Handler : EventHandler {
	Array<int> BaseLightLevels;
	int Mode, Preset, PreGain, PostGain, FogDensity, MinLight;
	int OldMode, OldPreset, OldPreGain, OldPostGain, OldFogDensity, OldMinLight;
	double SkyMode, OldSkyMode;
	int BaseAdjustment, FinalAdjustment;
	bool IsSky;

	override void WorldLoaded(WorldEvent e) {
		if(!ddz_lighting) {
			ThinkerIterator it = ThinkerIterator.Create ("Lighting");
			Lighting effect;
			while (effect = Lighting (it.Next ())) { effect.Destroy (); }
		}

		BaseLightLevels.Clear();
		for(int i = 0; i < Level.Sectors.Size(); i++) {
			BaseLightlevels.Push(Level.Sectors[i].LightLevel);
		}

		ChangeLighting();

		if(e.isReopen) {
			let iterator = ThinkerIterator.Create("DarkDoomZ_Spotlight");
			for (Thinker mo; (mo = iterator.Next());) { mo.Destroy(); }
		}
	}

	override void PlayerEntered(PlayerEvent e) {
		PlayerInfo player = players[e.PlayerNumber];
		let FlashlightClass = (class<Inventory>)(Actor.GetReplacement("DarkDoomZ_Flashlight"));
		player.mo.GiveInventory(FlashlightClass, 1);
	}

	override void UiTick() {
		EventHandler.SendNetworkEvent("UpdateLights");
	}

	override void NetworkProcess(ConsoleEvent e) {
		if(e.Name == "UpdateLights") ChangeLighting();
	}

	void ChangeLighting() {
		Mode = ddz_mode;
		Preset = ddz_preset;
		PreGain = ddz_pregain;
		PostGain = ddz_postgain;
		SkyMode = ddz_skymode;
		FogDensity = ddz_fog;
		MinLight = ddz_minlight;

		bool changed = (
			OldMode != Mode ||
			OldPreset != Preset ||
			OldPreGain != PreGain ||
			OldPostGain != PostGain ||
			OldSkyMode != Skymode ||
			OldFogDensity != FogDensity ||
			OldMinLight != MinLight);

		if (changed) {
			BaseAdjustment = 32 * Preset;
			for(int i = 0; i < BaseLightLevels.Size(); i++) {
				int BaseLightLevel = BaseLightLevels[i];
				BaseLightLevel += PreGain;

				IsSky = (level.Sectors[i].GetTexture(0) == skyflatnum ||
						 level.Sectors[i].GetTexture(1) == skyflatnum);

				FinalAdjustment = BaseAdjustment;
				if(IsSky) FinalAdjustment *= SkyMode;

				// Link to graphing calculator depiction of different modes
				// https://www.desmos.com/calculator/v1ni4wftcg
				switch(Mode) {
					case 1: //subtract raw light level (simple fade)
						Level.Sectors[i].Lightlevel = BaseLightLevel - FinalAdjustment;
						break;
					case 2: //linear compression
						Level.Sectors[i].Lightlevel = BaseLightLevel * (1.0 - FinalAdjustment / 256.0);
						break;
					case 3: //clamp max brightness level
						Level.Sectors[i].Lightlevel = clamp(BaseLightLevel, 0, 256 - FinalAdjustment);
						break;
					case 4: //apply exponential gamma curve
						Level.Sectors[i].Lightlevel = (256 - (FinalAdjustment ** (FinalAdjustment / 256))) * (BaseLightLevel / 256.0) ** (1 + (FinalAdjustment / (33 - (FinalAdjustment / 8))));
						break;
					case 10: //DarkDoom Lite (fixed subtract mode)
						Level.Sectors[i].Lightlevel = BaseLightLevel - 96;
						break;
					case 11: //DarkDoom Classic (fixed subtract mode)
						Level.Sectors[i].Lightlevel = BaseLightLevel - 128;
						break;
					case 12: //DarkDoom Black (fixed subtract mode)
						Level.Sectors[i].Lightlevel = BaseLightLevel - 256;
						break;
					default: //disable
						Level.Sectors[i].Lightlevel = BaseLightLevel; //reset lightlevels
						break;
				}

				Level.Sectors[i].Lightlevel = max(Level.Sectors[i].Lightlevel, MinLight);
				Level.Sectors[i].Lightlevel += PostGain;

				double FinalFogDensity = FogDensity;
				if(IsSky) FinalFogDensity *= SkyMode;
				level.Sectors[i].SetFogDensity(FinalFogDensity);
			}
		}
		OldMode = Mode;
		OldPreset = Preset;
		OldPreGain = PreGain;
		OldPostGain = PostGain;
		OldSkyMode = SkyMode;
		OldFogDensity = FogDensity;
		OldMinLight = MinLight;
	}
}

class DarkDoomZ_Flashlight : CustomInventory {
	DarkDoomZ_Spotlight SelfLight1, SelfLight2;
	bool Active;
	int Quality,OldQuality;
	int Type,OldType;
	int Mount,OldMount;
	int R,G,B;
	int beamInner, beamOuter, beamRadius;
	int spillInner, spillOuter, spillRadius;
	double offsetAngle, offsetZ;
	int inertia;
	double spring, damping;

	default {
		+INVENTORY.PERSISTENTPOWER;
	}

	override void DoEffect() {
		super.DoEffect();
		Quality = CVar.GetCvar("ddz_fl_quality").GetInt();
		Type = CVar.GetCvar("ddz_fl_type").GetInt();
		Mount = CVar.GetCvar("ddz_fl_pos").GetInt();
		if(Active) {
			if(Quality != OldQuality ||
			   Type != OldType ||
			   Mount != OldMount) {

				if(SelfLight1) { SelfLight1.Destroy(); }
				if(SelfLight2) { SelfLight2.Destroy(); }
			}

			switch(Type) {
				case 0: //Incandescent
					R = 255;
					G = 214;
					B = 170;
					beamInner = 0;
					beamOuter = 25;
					beamRadius = 384;
					spillInner = 15;
					spillOuter = 45;
					spillRadius = 128;
					break;
				case 1: //Halogen
					R = 255;
					G = 241;
					B = 224;
					beamInner = 0;
					beamOuter = 20;
					beamRadius = 512;
					spillInner = 10;
					spillOuter = 60;
					spillRadius = 384;
					break;
				case 2: //LED
					R = 248;
					G = 255;
					B = 255;
					beamInner = 0;
					beamOuter = 15;
					beamRadius = 640;
					spillInner = 15;
					spillOuter = 75;
					spillRadius = 256;
					break;
				case 3: //Red filter
					R = 192;
					G = 36;
					B = 34;
					beamInner = 0;
					beamOuter = 20;
					beamRadius = 256;
					spillInner = 10;
					spillOuter = 60;
					spillRadius = 128;
					break;
			}

			switch(Mount) {
				case 0: //Handheld
					spring = 0.25;
					damping = 0.2;
					inertia = 4;
					offsetAngle = 0;
					offsetZ = -13;
					break;
				case 1: //Left Shoulder
					spring = 0.35;
					damping = 0.75;
					inertia = 2;
					offsetAngle = 80;
					offsetZ = -5;
					break;
				case 2: //Right Shoulder
					spring = 0.35;
					damping = 0.75;
					inertia = 2;
					offsetAngle = -80;
					offsetZ = -5;
					break;
				case 3: //Helmet
					spring = 1;
					damping = 1;
					inertia = 1;
					offsetAngle = 0;
					offsetZ = 4;
					break;
			}

			switch(Quality) {
				case 0:
					if(!SelfLight1) {
						SelfLight1 = DarkDoomZ_Spotlight(Spawn("DarkDoomZ_Spotlight",owner.pos,false));
						SelfLight1.FollowTarget = owner;
						SelfLight1.args[DynamicLight.LIGHT_RED] = R; //R
						SelfLight1.args[DynamicLight.LIGHT_GREEN] = G; //G
						SelfLight1.args[DynamicLight.LIGHT_BLUE] = B; //B
						SelfLight1.args[DynamicLight.LIGHT_INTENSITY] = (beamRadius + spillRadius) / 2; //Radius
						SelfLight1.SpotInnerAngle = (beamInner + spillInner) / 2;
						SelfLight1.SpotOuterAngle = (beamOuter + spillOuter) / 2;
						SelfLight1.angle = owner.angle;
						SelfLight1.pitch = owner.pitch;
						SelfLight1.spring = spring;
						SelfLight1.damping = damping;
						SelfLight1.inertia = inertia;
						SelfLight1.offsetAngle = offsetAngle;
						SelfLight1.offsetZ = offsetZ;
					}
					break;
				case 1:
					if(!SelfLight1) {
						SelfLight1 = DarkDoomZ_Spotlight(Spawn("DarkDoomZ_Spotlight",owner.pos,false));
						SelfLight1.FollowTarget = owner;
						SelfLight1.args[DynamicLight.LIGHT_RED] = R; //R
						SelfLight1.args[DynamicLight.LIGHT_GREEN] = G; //G
						SelfLight1.args[DynamicLight.LIGHT_BLUE] = B; //B
						SelfLight1.args[DynamicLight.LIGHT_INTENSITY] = beamRadius; //Radius
						SelfLight1.SpotInnerAngle = beamInner;
						SelfLight1.SpotOuterAngle = beamOuter;
						SelfLight1.angle = owner.angle;
						SelfLight1.pitch = owner.pitch;
						SelfLight1.spring = spring;
						SelfLight1.damping = damping;
						SelfLight1.inertia = inertia;
						SelfLight1.offsetAngle = offsetAngle;
						SelfLight1.offsetZ = offsetZ;
					}
					if(!SelfLight2) {
						SelfLight2 = DarkDoomZ_Spotlight(Spawn("DarkDoomZ_Spotlight",owner.pos,false));
						SelfLight2.FollowTarget = owner;
						SelfLight2.args[DynamicLight.LIGHT_RED] = R * 0.75; //R
						SelfLight2.args[DynamicLight.LIGHT_GREEN] = G * 0.75; //G
						SelfLight2.args[DynamicLight.LIGHT_BLUE] = B * 0.75; //B
						SelfLight2.args[DynamicLight.LIGHT_INTENSITY] = spillRadius; //Radius
						SelfLight2.SpotInnerAngle = spillInner;
						SelfLight2.SpotOuterAngle = spillOuter;
						SelfLight2.angle = owner.angle;
						SelfLight2.pitch = owner.pitch;
						SelfLight2.spring = spring;
						SelfLight2.damping = damping;
						SelfLight2.inertia = inertia;
						SelfLight2.offsetAngle = offsetAngle;
						SelfLight2.offsetZ = offsetZ;
					}
					break;
			}
		}
		else {
			if(SelfLight1) { SelfLight1.Destroy(); }
			if(SelfLight2) { SelfLight2.Destroy(); }
		}
		OldQuality = Quality;
		OldType = Type;
		OldMount = Mount;
	}

	States {
	Spawn:
		ROCK A -1;
		stop;
	Use:
		TNT1 A 1 { invoker.ToggleActive(); }
		loop;
	}

	virtual void ToggleActive() {
		if(Active) { Active = false; owner.A_PlaySound("DDZ_Flashlight_Off", CHAN_AUTO, 0.5); }
		else { Active = true; owner.A_PlaySound("DDZ_Flashlight_Off", CHAN_AUTO, 0.5); }
	}
}

class DarkDoomZ_Spotlight : DynamicLight {
	actor FollowTarget;
	double vela, velp;
	double spring, damping;
	double offsetAngle, offsetZ;
	vector3 targetPos;
	int inertia;

	default {
		DynamicLight.Type "Point";
		+DYNAMICLIGHT.ATTENUATE;
		+DYNAMICLIGHT.SPOT
	}
	override void Tick() {
		super.Tick();
		if(followTarget && followTarget.player) {
			if(inertia == 0) inertia = 1;
			targetpos = followTarget.vec3Angle(
				2 + (6 * abs(sin(offsetAngle))),
				followtarget.angle + offsetAngle,
				followtarget.player.viewheight + offsetZ,
				false);
			vel.x += DampedSpring(pos.x, targetpos.x, vel.x, 1, 1);
			vel.y += DampedSpring(pos.y, targetpos.y, vel.y, 1, 1);
			vel.z += DampedSpring(pos.z, targetpos.z, vel.z, 1, 1);
			vela  += DampedSpring(angle, followTarget.angle, vela, spring, damping);
			velp  += DampedSpring(pitch, followTarget.pitch, velp, spring, damping);
			setOrigin(pos + vel, true);
			A_SetAngle(angle + (vela / inertia), true);
			A_SetPitch(pitch + (velp / inertia), true);
		}
	}

	double DampedSpring(double p, double r, double v, double k, double d) {
		return -(d * v) - (k * (p - r));
	}
}